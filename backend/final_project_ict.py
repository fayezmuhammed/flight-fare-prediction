# -*- coding: utf-8 -*-
"""Final_Project_ICT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hd76vtXj5ZTBBMJb1JiuMl8yocM4vDLG
"""

import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
data=pd.read_csv("expanded_flights.csv")
data


"""# Data Preparation"""

data.drop('Unnamed: 0', axis=1, inplace=True)
data.drop('flight', axis=1, inplace=True)

data



Q1 = data['duration'].quantile(0.25)
Q3 = data['duration'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5*IQR
upper_bound = Q3 + 1.5*IQR

data['duration'] = data['duration'].clip(lower_bound,upper_bound)

Q1 = data['price'].quantile(0.25)
Q3 = data['price'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5*IQR
upper_bound = Q3 + 1.5*IQR

data['price'] = data['price'].clip(lower_bound,upper_bound)


data

columns_to_encode = ['airline', 'source_city', 'destination_city']
data = pd.get_dummies(data, columns=columns_to_encode,dtype=int)

data

time_mapping = {
    'Early_Morning': 0,
    'Morning': 1,
    'Afternoon': 2,
    'Evening': 3,
    'Night': 4,
    'Late_Night': 5
}


day_mapping = {
    'Monday': 0,
    'Tuesday': 1,
    'Wednesday': 2,
    'Thursday': 3,
    'Friday': 4,
    'Saturday': 5,
    'Sunday':6
}

stops_mapping = {
    'zero': 0,
    'one': 1,
    'two_or_more': 2
}

class_mapping = {
    'Economy': 0,
    'Business': 1
}

data['departure_time'] = data['departure_time'].map(time_mapping)
data['arrival_time'] = data['arrival_time'].map(time_mapping)
data['day'] = data['day'].map(day_mapping)
data['stops'] = data['stops'].map(stops_mapping)
data['class'] = data['class'].map(class_mapping)

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
cols_to_scale = ['days_left', 'duration']

scaler = StandardScaler()
#scaler = MinMaxScaler()
data[cols_to_scale] = scaler.fit_transform(data[cols_to_scale])

data


from sklearn.model_selection import train_test_split
y=data['price']
x=data.drop(columns=['price'])
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)




from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score





rf_model = RandomForestRegressor(n_estimators=50, max_depth=30, max_features='sqrt',min_samples_leaf=1,min_samples_split=2,random_state=42)
rf_model.fit(x_train, y_train)
rf_pred = rf_model.predict(x_test)
print("R-squared Score:", r2_score(y_test, rf_pred))
print("Mean Squared Error:", mean_squared_error(y_test, rf_pred))
print("Root Mean Squared Error:", np.sqrt(mean_squared_error(y_test, rf_pred)))



import joblib
joblib.dump(rf_model, 'model.pkl')      
joblib.dump(scaler, 'scaler.pkl')
